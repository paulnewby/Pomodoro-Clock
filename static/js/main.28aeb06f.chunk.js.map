{"version":3,"sources":["Components/MinuteEditor.js","Components/Timer.js","Components/App.js","serviceWorker.js","index.js"],"names":["MinuteEditor","props","title","className","disabled","isPlaying","onClick","value","onMinuteChanged","noOfRepetitions","audio","Audio","addEventListener","this","currentTime","play","Timer","onToggleSessionState","setState","prevState","isSession","timerSecond","sessionLength","breakLength","playTimer","stopTimer","intervalId","setInterval","decreaseTimer","onSetPlayState","state","clearInterval","resetTimer","formatNumber","num","toLocaleString","minimumIntegerDigits","useGrouping","prevProps","Math","floor","React","Component","App","onReset","onChangeBreakLength","number","onChangeSessionLength","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.28aeb06f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction MinuteEditor(props) {\n  function increase() {\n    if (props.value === 60) {\n      return;\n    }\n    props.onMinuteChanged(props.value+1);\n  }\n\n  function decrease() {\n    if (props.value === 1) {\n      return;\n    }\n    props.onMinuteChanged(props.value-1);\n  }\n\n  return (\n    <section>\n      <h4>{props.title}</h4>\n      <section className=\"interval-container\">\n        <button\n          disabled={props.isPlaying === true ? \"disabled\" : \"\"}\n          onClick={decrease}\n        >\n          Down\n        </button>\n        <p className=\"interval-length\">{props.value}</p>\n        \n        <button\n          disabled={props.isPlaying === true ? \"disabled\" : \"\"}\n          onClick={increase}\n        >\n          Up\n        </button>\n      </section>\n      <h4>Length</h4>\n\n    </section>\n  );\n}\n\nexport default MinuteEditor;\n","import React from \"react\";\n\nlet noOfRepetitions = 2;\n\nlet audio = new Audio('https://actions.google.com/sounds/v1/alarms/alarm_clock.ogg');\n\naudio.addEventListener('ended', function() {\n  noOfRepetitions = noOfRepetitions-1;\n  if (noOfRepetitions > 0) {\n      this.currentTime = 0;\n      this.play()};\n}, false);\n\n\n\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      isSession: true,\n      timerSecond: props.sessionLength * 60,\n      intervalId: 0,\n    };\n  }\n\n  \n\n  \n  componentDidUpdate(prevProps) {\n    if (prevProps.sessionLength !== this.props.sessionLength && this.state.isSession) {\n      this.setState({\n        timerSecond: this.props.sessionLength * 60\n      })\n    }\n    else if (prevProps.breakLength !== this.props.breakLength && !this.state.isSession) {\n      this.setState({\n        timerSecond: this.props.breakLength * 60\n      })\n    }\n  }\n\n\n  onToggleSessionState = () => {    \n    audio.play();\n    this.setState((prevState) => {\n      const isSession = !prevState.isSession;\n      return {\n        isSession: isSession,\n        timerSecond: (isSession ? this.props.sessionLength : this.props.breakLength) * 60 \n      }\n    });\n    this.playTimer();\n  }\n\n  playTimer = () => {\n    this.stopTimer();\n    let intervalId = setInterval(this.decreaseTimer, 1000);\n    this.props.onSetPlayState(true);\n    this.setState({\n      intervalId: intervalId\n    });\n  };\n\n\n  decreaseTimer = () => {\n    switch (this.state.timerSecond) {\n      case 0:\n        this.onToggleSessionState();\n\n        break;\n      default:\n        this.setState((prevState) => {\n          return {\n            timerSecond: prevState.timerSecond - 1,\n          };\n        });\n        break;\n    }\n  };\n\n  stopTimer= () => {\n    clearInterval(this.state.intervalId);\n    this.props.onSetPlayState(false);\n  }\n\n  resetTimer = () => {\n    this.stopTimer();\n    this.props.resetTimer();\n    this.props.onSetPlayState(false);\n    this.setState({\n      isSession: true,\n      timerSecond: this.props.sessionLength * 60\n    });\n  }\n\n  formatNumber = (num) => {\n    return num.toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false});\n  }\n\n\n\n  render() {\n    return (\n      <section className=\"timer-items-formatting\">\n        <section className=\"timer-container\">\n          <h4 className=\"timer-text\">{this.state.isSession === true ? \"Session\" : \"Break\"}</h4>\n          <span className=\"timer\">{this.formatNumber(Math.floor(this.state.timerSecond/60))}</span>\n          <span className=\"timer\">:</span>\n          <span className=\"timer\">{this.formatNumber(this.state.timerSecond % 60)}\n          </span>\n        </section>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        <section className=\"timer-actions\">\n          <button onClick={this.playTimer}>Play</button>\n          &nbsp;&nbsp;&nbsp;&nbsp;\n          <button onClick={this.stopTimer}>Stop</button>\n          &nbsp;&nbsp;&nbsp;&nbsp;\n          <button onClick={this.resetTimer}>Reset</button>\n        </section>\n      </section>\n    );\n  }\n}\n\nexport default Timer;\n","import React from \"react\";\nimport \"../App.css\";\n\nimport MinuteEditor from \"./MinuteEditor\";\nimport Timer from \"./Timer\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      isPlaying: false,\n    };\n  }\n\n  onReset = () => {\n    this.setState(prevState => {\n      return {\n        breakLength: 5,\n        sessionLength: 25,\n        isPlaying: false,\n      }\n    })\n  }\n\n  onChangeBreakLength = (number) => {\n    this.setState((prevState) => {\n      return {\n        breakLength: number,\n      };\n    });\n  };\n\n  onChangeSessionLength = (number) => {\n    this.setState((prevState) => {\n      return {\n        sessionLength: number,\n      };\n    });\n  };\n\n  onSetPlayState = (isPlaying) => {\n    this.setState((prevState) => {\n      return { isPlaying };\n    });\n  };\n\n  render() {\n    return (\n      <main>\n          <div className=\"clock-container\">\n            <h2>\n              Pomodoro\n              <br />\n              Clock\n            </h2>\n          </div>\n          <section className=\"interval-length-container\">\n            <MinuteEditor\n              title=\"Break\"\n              isPlaying={this.state.isPlaying}\n              value={this.state.breakLength}\n              onMinuteChanged={this.onChangeBreakLength}\n            />\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            <MinuteEditor\n              title=\"Session\"\n              isPlaying={this.state.isPlaying}\n              value={this.state.sessionLength}\n              onMinuteChanged={this.onChangeSessionLength}\n            />\n          </section>\n          <Timer\n            sessionLength={this.state.sessionLength}\n            breakLength={this.state.breakLength}\n            isPlaying={this.state.isPlaying}\n            onSetPlayState={this.onSetPlayState}\n            resetTimer={this.onReset}\n          />\n      </main>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}